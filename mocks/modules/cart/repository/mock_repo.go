// Code generated by MockGen. DO NOT EDIT.
// Source: modules/cart/repository/repository.go

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	reflect "reflect"

	models "github.com/bagustyo92/auth/modules/cart/models"
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
)

// MockCartRepoInterface is a mock of CartRepoInterface interface.
type MockCartRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepoInterfaceMockRecorder
}

// MockCartRepoInterfaceMockRecorder is the mock recorder for MockCartRepoInterface.
type MockCartRepoInterfaceMockRecorder struct {
	mock *MockCartRepoInterface
}

// NewMockCartRepoInterface creates a new mock instance.
func NewMockCartRepoInterface(ctrl *gomock.Controller) *MockCartRepoInterface {
	mock := &MockCartRepoInterface{ctrl: ctrl}
	mock.recorder = &MockCartRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepoInterface) EXPECT() *MockCartRepoInterfaceMockRecorder {
	return m.recorder
}

// DeleteProductCart mocks base method.
func (m *MockCartRepoInterface) DeleteProductCart(cartID go_uuid.UUID, productCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductCart", cartID, productCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductCart indicates an expected call of DeleteProductCart.
func (mr *MockCartRepoInterfaceMockRecorder) DeleteProductCart(cartID, productCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductCart", reflect.TypeOf((*MockCartRepoInterface)(nil).DeleteProductCart), cartID, productCode)
}

// GetCart mocks base method.
func (m *MockCartRepoInterface) GetCart(id go_uuid.UUID, filter models.ProductCartFilter) (*models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", id, filter)
	ret0, _ := ret[0].(*models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockCartRepoInterfaceMockRecorder) GetCart(id, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockCartRepoInterface)(nil).GetCart), id, filter)
}

// InsertCart mocks base method.
func (m *MockCartRepoInterface) InsertCart(chart models.Cart) (*models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCart", chart)
	ret0, _ := ret[0].(*models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCart indicates an expected call of InsertCart.
func (mr *MockCartRepoInterfaceMockRecorder) InsertCart(chart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCart", reflect.TypeOf((*MockCartRepoInterface)(nil).InsertCart), chart)
}

// InsertProductCart mocks base method.
func (m *MockCartRepoInterface) InsertProductCart(productCart models.ProductCart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductCart", productCart)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductCart indicates an expected call of InsertProductCart.
func (mr *MockCartRepoInterfaceMockRecorder) InsertProductCart(productCart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductCart", reflect.TypeOf((*MockCartRepoInterface)(nil).InsertProductCart), productCart)
}

// UpdateProductCart mocks base method.
func (m *MockCartRepoInterface) UpdateProductCart(productID go_uuid.UUID, dataUpdate map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductCart", productID, dataUpdate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductCart indicates an expected call of UpdateProductCart.
func (mr *MockCartRepoInterfaceMockRecorder) UpdateProductCart(productID, dataUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductCart", reflect.TypeOf((*MockCartRepoInterface)(nil).UpdateProductCart), productID, dataUpdate)
}
