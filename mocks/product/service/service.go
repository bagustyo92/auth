// Code generated by MockGen. DO NOT EDIT.
// Source: modules/product/service/interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	models "github.com/bagustyo92/auth/modules/auth/models"
	models0 "github.com/bagustyo92/auth/modules/product/models"
	models1 "github.com/bagustyo92/auth/modules/request/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProductServiceInterface is a mock of ProductServiceInterface interface.
type MockProductServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceInterfaceMockRecorder
}

// MockProductServiceInterfaceMockRecorder is the mock recorder for MockProductServiceInterface.
type MockProductServiceInterfaceMockRecorder struct {
	mock *MockProductServiceInterface
}

// NewMockProductServiceInterface creates a new mock instance.
func NewMockProductServiceInterface(ctrl *gomock.Controller) *MockProductServiceInterface {
	mock := &MockProductServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProductServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceInterface) EXPECT() *MockProductServiceInterfaceMockRecorder {
	return m.recorder
}

// GetAuthData mocks base method.
func (m *MockProductServiceInterface) GetAuthData(jwtClaim models.JWTClaims) (*models.Auth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthData", jwtClaim)
	ret0, _ := ret[0].(*models.Auth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthData indicates an expected call of GetAuthData.
func (mr *MockProductServiceInterfaceMockRecorder) GetAuthData(jwtClaim interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthData", reflect.TypeOf((*MockProductServiceInterface)(nil).GetAuthData), jwtClaim)
}

// GetPriceListIncludingPriceInUSD mocks base method.
func (m *MockProductServiceInterface) GetPriceListIncludingPriceInUSD() ([]models1.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceListIncludingPriceInUSD")
	ret0, _ := ret[0].([]models1.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceListIncludingPriceInUSD indicates an expected call of GetPriceListIncludingPriceInUSD.
func (mr *MockProductServiceInterfaceMockRecorder) GetPriceListIncludingPriceInUSD() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceListIncludingPriceInUSD", reflect.TypeOf((*MockProductServiceInterface)(nil).GetPriceListIncludingPriceInUSD))
}

// GetSummaryPriceList mocks base method.
func (m *MockProductServiceInterface) GetSummaryPriceList() (*models0.SummaryPriceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSummaryPriceList")
	ret0, _ := ret[0].(*models0.SummaryPriceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSummaryPriceList indicates an expected call of GetSummaryPriceList.
func (mr *MockProductServiceInterfaceMockRecorder) GetSummaryPriceList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSummaryPriceList", reflect.TypeOf((*MockProductServiceInterface)(nil).GetSummaryPriceList))
}
